"0","# Dataset for overlap between PSG and actigraphy"
"0","overlap <- read_csv(""/home/janique/mesa/overlap/mesa-actigraphy-psg-overlap.csv"","
"0","                    col_types = cols_only("
"0","                        mesaid = col_integer(),"
"0","                        line = col_integer()"
"0","                    )) "
"0",""
"0","# Function for importing actigraphy"
"0","read_func <- function(nm) {"
"0","    dt <- read_csv(nm,"
"0","             col_types = cols_only("
"0","                 mesaid = col_integer(),"
"0","                 linetime = col_character(),"
"0","                 offwrist = col_integer(),"
"0","                 activity = col_double(),"
"0","                 marker = col_integer(),"
"0","                 whitelight = col_double(),"
"0","                 wake = col_factor(),"
"0","                 interval = col_factor(),"
"0","                 daybymidnight = col_integer(),"
"0","                 daybynoon = col_integer()"
"0","             )) %>% "
"0","        rename(tm_char = linetime) %>% "
"0","        mutate(linetime = parse_time(tm_char), .keep = ""unused"")"
"0","    "
"0","    # Subsetting the subject's ID"
"0","    id <- unique(dt$mesaid)"
"0","    "
"0","    sbst <- overlap %>% filter(mesaid == id)"
"0","    "
"0","    if (nrow(sbst) == 0) {stop(""No such ID in the overlap dataset"")}"
"0","    # Extracting the starting point for PSG from the overlap dataset"
"0","    start_index <- sbst %>% select(line) %>%"
"0","        as.numeric()"
"0","    "
"0","    lead_zero <- str_extract(nm, ""\\d+"")"
"0","    xml_file <- paste(""/home/janique/mesa/polysomnography/annotations-events-profusion/mesa-sleep-"", lead_zero, ""-profusion.xml"", sep = """")"
"0","    "
"0","    xml1 <- xmlParse(file = xml_file) "
"0","    r <- xmlRoot(xml1)"
"0","    "
"0","    sleep_stages <- r[""SleepStages""] %>% unlist(use.names = FALSE) %>% "
"0","    xmlValue(trim = TRUE) %>% "
"0","    str_split(pattern = """")"
"0","    "
"0","    len_stages <- length(sleep_stages[[1]])"
"0","    "
"0","    df_psg <- tibble("
"0","        psg_stage = c(rep(NaN, start_index), as.numeric(sleep_stages[[1]]),"
"0","                      rep(NaN, "
"0","                          nrow(dt) - start_index - len_stages))"
"0","    )    "
"0","    "
"0","    df_overlap <- dt %>% cbind(df_psg) %>% "
"0","        filter(offwrist == 0 & !is.na(activity) & daybymidnight < 8) %>% "
"0","        mutate("
"0","            hr = hour(linetime),"
"0","            date_var = ymd(""1960-01-01"") + days(daybymidnight),"
"0","            dt = ymd_hms(paste(date_var, linetime)),"
"0","            dt5 = floor_date(dt, unit = ""5 minutes""),"
"0","            mins5 = hms(format(dt5, format = ""%H:%M:%S"")),"
"0","            psg01 = if_else(is.na(psg_stage), NaN,"
"0","                            if_else(psg_stage == 0, 0, 1))"
"0","        ) %>% "
"0","        rename(ID = mesaid)"
"0","    "
"0","    return(df_overlap)"
"0","}"
"0",""
"0","# Function for adding average"
"0","add_summary <- function(dt) {"
"0","    dt_sum <- dt %>% select(ID, activity, dt5, psg01) %>% "
"0","        group_by(ID, dt5) %>% "
"0","        summarise(act5_mean = mean(activity),"
"0","                  act5_mean_sqrt = sqrt(act5_mean),"
"0","                  psg_mean = mean(psg01),"
"0","                  sleep_psg = if_else(psg_mean > 0.5, ""REST"", ""ACTIVE""),"
"0","                  dummy = 0, .groups = ""drop"")"
"0","    "
"0","    return(dt_sum)"
"0","}"
"0",""
"0",""
"0","# Function for adding the HMM model"
"0","plot_step <- function(dt, nb_iter = 10, plot_hist = FALSE) {"
"0","    "
"0","    # Calculate preparatory dataframe"
"0","    df_prep <- dt %>%"
"0","    select(all_of(c(""act5_mean"", ""dummy"", ""ID""))) %>% "
"0","    as.data.frame() %>% "
"0","    prepData(type = ""UTM"", coordNames = c(""act5_mean"", ""dummy""))"
"0",""
"0","    # Histogram of differences"
"0","    if (plot_hist) {"
"0","        print(filter(df_prep, !is.na(step)) %>% ggplot() +"
"0","          geom_histogram(aes(x = step), bins = 30) +"
"0","          labs(x = ""Difference"","
"0","               title = ""Histogram of consecutive activity differences"")"
"0","        )"
"0","    }"
"0",""
"0","    quant <- quantile(df_prep$step, na.rm = TRUE, names = FALSE)"
"0","    varian <- var(df_prep$step, na.rm = TRUE)"
"0","    std <- sqrt(varian)"
"0",""
"0","    # Only first state can have zero observations"
"0","    zeromass0 <- c(0.5, 0, 0)"
"0","    "
"0","    # Minimum for optimisation"
"0","    minim <- Inf"
"0","    "
"0","    # Number of random starts"
"0","    for (j in 1:nb_iter) {"
"0","        mu0 <- sort(runif(3, quant[2], quant[4]))"
"0","        sigma0 <- sort(runif(3, std, varian))"
"0","        stepPar0 <- c(mu0, sigma0, zeromass0)      "
"0","        mod <- try(fitHMM(data = df_prep, nbStates = 3, stepPar0 = stepPar0,"
"0","                          angleDist = ""none"", stepDist = ""gamma""), "
"0","                   silent = TRUE)  "
"0","        if (class(mod)[1] != ""try-error"") {"
"0","            new_minim <- mod$mod$minimum"
"0","            enough_states <- try(table(viterbi(mod)), silent = TRUE)"
"0","            if (class(enough_states) != ""try-error""){"
"0","                if (new_minim < minim && length(enough_states) == 3) {"
"0","                    m3 <- mod"
"0","                    minim <- new_minim"
"0","                }                "
"0","            }"
"0","        }"
"0","    }"
"0","    if (is.infinite(minim)) {"
"0","        m3 <- NULL"
"0","        print(""Did not find a HMM for 3 states"")"
"0","    }"
"0","    return(m3)"
"0","    }"
"0",""
"0","# Obtain mode"
"0","getmode <- function(v) {"
"0","   uniqv <- unique(v)"
"0","   uniqv[which.max(tabulate(match(v, uniqv)))]"
"0","}"
"0",""
"0","# Wrapper for extracting means and variances"
"0","round_func <- function(x) {round(as.numeric(x), digits = 1)}"
"0",""
"0","# Adding a summary of the HMM model"
"0","summary_func <- function(mod, df_old, dt, variab){"
"0","    "
"0","    # State characteristics"
"0","    gamma_stats <- mod$mle$stepPar %>% round(digits = 2)"
"0","    # Probability of going between states"
"0","    prob_matrix <- mod$mle$gamma %>% round(digits = 3)"
"0","    "
"0","    # Obtain states"
"0","    states <- viterbi(mod)"
"0","    # Join states with main dataframe"
"0","    df_states <- cbind(dt, states)"
"0","    "
"0","    # Order states by average activity"
"0","    df_order <- df_states %>% group_by(states) %>% "
"0","        summarise(mean_state = mean(.data[[""act5_mean""]]), "
"0","                  .groups = ""drop"") %>% "
"0","        arrange(mean_state) %>% "
"0","        mutate(state_order = row_number())"
"0",""
"0","    # Add ordered states to dataframe"
"0","    df_ord <- df_order %>% select(states, state_order) %>% "
"0","        right_join(df_states, by = ""states"") %>% "
"0","        select(-states) %>% arrange(dt5)"
"0","    "
"0","    # visualise states' classification"
"0","    print(ggplot(df_ord, aes_string(x = ""dt5"", y = variab)) + "
"0","              geom_point(aes(col = as.factor(state_order)), "
"0","                         size = 0.5, alpha = 0.7) +"
"0","              scale_x_datetime(date_breaks = ""4 hours"","
"0","                               date_labels = ""%H:%M"") +"
"0","              facet_wrap(vars(date(dt5)), scales = ""free_x"", ncol = 4) +"
"0","              ggtitle(""Plot of the states of HMM"") +"
"0","              labs(col = ""State"", x = ""Date and time"") +"
"0","              theme(legend.position = c(1, 0), "
"0","                    legend.justification = c(1, 0),"
"0","                    axis.text.x = element_text(size = 6)))"
"0",""
"0","    # Obtaining probabilities for each state"
"0","    probs_states <- stateProbs(mod)"
"0","    "
"0","    # Obtain raw rest states"
"0","    rest_states_raw <- df_order %>% filter(mean_state < sleep_limit) %>% "
"0","        select(states) %>% unlist(use.names = FALSE)"
"0","    "
"0","    # Subset probabilities for rest states"
"0","    df_probs <- tibble("
"0","        asleep = rowSums(probs_states[, rest_states_raw, drop = FALSE])"
"0","        # Join with averaged dataset"
"0","        ) %>% cbind(dt) %>% "
"0","        # Join with big dataset to add hour"
"0","         left_join(select(df_old, dt5, hr), by = ""dt5"")  %>%"
"0","        mutate(new_date = if_else(hr >= 12, ""1960-01-01"", ""1960-01-02""))"
"0","    "
"0","    # Change date so that middle is at midday"
"0","    date(df_probs$dt5) = ymd(df_probs$new_date)"
"0",""
"0","    # Calculate mean probability for 5 minute intervals"
"0","    df_prob <- df_probs %>% group_by(dt5) %>%"
"0","          summarise(mean_prob = mean(asleep), .groups = ""drop"") %>% "
"0","        mutate(tm = as.numeric(hms(format(dt5, format = ""%H:%M:%S"")))/3600)"
"0","    diff_vctr <- rep(diff(df_prob$tm)[1], 287)"
"0","    sleep_amount <- sum(diff_vctr * (head(df_prob$mean_prob,-1) +"
"0","                                         tail(df_prob$mean_prob,-1)))/2"
"0",""
"0","    # Plot probability of rest"
"0","    print(df_prob %>% ggplot(aes(x = dt5, y = mean_prob)) +"
"0","              geom_line() +"
"0","              geom_smooth(method = ""gam"", se = FALSE) +"
"0","              scale_x_datetime(date_labels = ""%H:%M"") +"
"0","              labs(title = ""Probability of sleep"", x = ""Time"","
"0","                   y = ""Mean probability""))"
"0",""
"0","    # Fit a loess model to estimate probability of over half of rest"
"0","    loess_model <- loess(mean_prob ~ as.numeric(dt5), data = df_prob)"
"0","    y_pred <- predict(loess_model) %>% round(digits = 2)"
"0","    halfs0 <- which(y_pred == 0.5)"
"0","    if (length(halfs0) == 1 || all(diff(halfs0) == 1)) {"
"0","        y_pred <- y_pred %>% round(digits = 1)"
"0","    }"
"0","    max_y <- min(max(y_pred), 1)"
"0","    min_y <- max(0, min(y_pred))"
"0","    amp <- max_y - min_y"
"0","    halfs <- which(y_pred == 0.5)"
"0",""
"0","    # Check if sleep monotone, if not choose the latter of the periods"
"0","    if (length(halfs) != 0){"
"0","        if_mono <- y_pred[halfs[1]:halfs[length(halfs)]]"
"0","        while (!all(if_mono >= 0.5)) {"
"0","            halfs <- halfs[-1]"
"0","            if_mono <- y_pred[halfs[1]:halfs[length(halfs)]]"
"0","        }"
"0","        start_end <- c(halfs[1], halfs[length(halfs)])        "
"0","        if (y_pred[length(y_pred)] > 0.5) {"
"0","            index_centre = start_end[2] + (start_end[1] + 288 - start_end[2])/2"
"0","        } else {"
"0","            index_centre <- floor(sum(start_end) / 2)"
"0","        }"
"0","    }"
"0",""
"0","    if (length(halfs) == 0 || all(diff(halfs) == 1)) {"
"0","        centre <- NA"
"0","        ri2 <- NA"
"0","    } else {"
"0","        centre <- hm(format(df_prob$dt5[index_centre], format = ""%H:%M""))"
"0","        # Rhythm index"
"0","    limit1 <- df_prob$dt5[index_centre] - hours(round(sleep_amount/2)) -"
"0","        minutes(floor(sleep_amount %% 1 * 60))"
"0","    limit2 <- df_prob$dt5[index_centre] + hours(round(sleep_amount/2)) +"
"0","        minutes(floor(sleep_amount %% 1 * 60))"
"0","    if (ymd_hms(""1960-01-02 12:00:00"") < limit2) {"
"0","        df_ext <- df_prob %>% filter(date(df_prob$dt5) == ""1960-01-01"")"
"0","        date(df_ext$dt5) <- ""1960-01-02"""
"0","        df_prob <- rbind(df_prob, df_ext)"
"0","    } "
"0","    limit_low <- floor_date(limit1, unit = ""5 minutes"")"
"0","    limit_high <- floor_date(limit2, unit = ""5 minutes"")"
"0","    index_low <- which(df_prob$dt5 == limit_low)"
"0","    index_high <- which(df_prob$dt5 == limit_high)"
"0","    ri_vctr <- df_prob$mean_prob[index_low:index_high]"
"0","    diff_ri <- rep(diff(df_prob$tm)[1], length(ri_vctr) - 1)"
"0","    ri1 <- sum(diff_ri * (head(ri_vctr,-1) + tail(ri_vctr,-1)))/2"
"0","    ri2 <- 24*(ri1/sleep_amount - sleep_amount/24)/(24 - sleep_amount)"
"0","    }  "
"0","    "
"0","    # Active states"
"0","    active_states <- df_order %>% filter(mean_state > sleep_limit) %>% "
"0","        select(state_order) %>% unlist(use.names = FALSE)"
"0","    "
"0","    print(paste(""Active states' numbers:"", active_states))"
"0","    "
"0","    # Filter for observations with PSG available"
"0","    df_psg <- df_ord %>% filter(!is.na(sleep_psg)) %>% "
"0","        mutate(my_class = if_else(state_order %in% active_states, "
"0","                                  ""ACTIVE"", ""REST""), .keep = ""unused"")"
"0","    "
"0","    # Confusion matrix for PSG"
"0","    psg_mtr <- table(df_psg$sleep_psg, df_psg$my_class)"
"0","    # Accuracy for PSG"
"0","    accur_psg <- ((sum(psg_mtr[rownames(psg_mtr) == ""REST"","
"0","                                   colnames(psg_mtr) == ""REST""],"
"0","                       psg_mtr[rownames(psg_mtr) == ""ACTIVE"","
"0","                                   colnames(psg_mtr) == ""ACTIVE""], "
"0","                       na.rm = TRUE)) / sum(psg_mtr)) %>% "
"0","        round(digits = 2)"
"0",""
"0","    # Print PSG classifications side by side with HMM classifications"
"0","    print(df_psg %>% "
"0","    select(dt5, act5_mean_sqrt, sleep_psg, my_class) %>% "
"0","    pivot_longer(cols = c(sleep_psg, my_class), names_to = ""type"","
"0","                 values_to = ""state"") %>% "
"0","    ggplot() + geom_point(aes(x = dt5, y = act5_mean_sqrt, col = state)) +"
"0","    facet_wrap(vars(type)) +"
"0","        ggtitle(""HMM classification vs PSG classification""))    "
"0","    "
"0","    # Combine HMM classifications with the actigraphy dataset ones"
"0","    with_mode <- df_old %>% group_by(dt5) %>% select(dt5, interval) %>% "
"0","        summarise(mode3 = getmode(interval), .groups = ""drop"") %>% "
"0","        cbind(df_ord)    "
"0","    # Combine rest-s with rest and output confusion matrix"
"0","    conf_matrix <- table(with_mode$state_order, "
"0","                         with_mode$mode3) %>% "
"0","        as.data.frame() %>% "
"0","        filter(Var2 %in% c(""ACTIVE"", ""REST"", ""REST-S"")) %>% "
"0","        mutate(classification = if_else(Var2 == ""ACTIVE"", ""ACTIVE"", ""REST""),"
"0","               state = if_else(Var1 %in% active_states, ""ACTIVE"", ""REST""),"
"0","               .keep = ""unused"") %>% "
"0","        group_by(state, classification) %>% "
"0","        summarise(freq = sum(Freq), .groups = ""drop"") %>% "
"0","        pivot_wider(names_from = classification, values_from = freq)"
"0",""
"0","    # Accuracy of actigraphy classifications and HMM ones"
"0","    accur <- ((filter(conf_matrix, state == ""ACTIVE"") %>% ungroup() %>% "
"0","                   select(ACTIVE) + "
"0","                   filter(conf_matrix, state == ""REST"") %>% ungroup() %>% "
"0","                   select(REST)) / nrow(df_ord)) %>% as.numeric() %>% "
"0","        round(digits = 2)"
"0",""
"0","    # Create a matrix of states ordered by their average activity"
"0","    ordered_matrix = matrix(0, nrow = 3, ncol = 3)"
"0","    for (i in 1:3) {"
"0","        for (j in 1:3) {"
"0","            ordered_matrix[i, j] = prob_matrix[df_order$states[i], "
"0","                                               df_order$states[j]]      "
"0","        }"
"0","    }"
"0","    "
"0","    # Extract restful ordered states"
"0","    rest_states <- df_order %>% filter(mean_state < sleep_limit) %>% "
"0","        select(state_order) %>% unlist(use.names = FALSE)    "
"0","    "
"0",""
"0","    # Matrix with restful states combined"
"0","    iterations <- 10000"
"0","    states_vec <- c(1, rep(NA, iterations - 1))"
"0","    "
"0","    for (i in 1:iterations){"
"0","        probs_state <- ordered_matrix[states_vec[i],]"
"0","        new_state <- which(rmultinom(1, 1, probs_state) == 1)"
"0","        states_vec[i + 1] <- new_state"
"0","    }"
"0","    "
"0","    if (length(rest_states) == 1) {"
"0","        simple_vector <- replace(states_vec, states_vec == 2, 3)"
"0","    } else if (length(rest_states) == 2) {"
"0","        simple_vector <- replace(states_vec, states_vec == 2, 1)"
"0","    }"
"0","    table_trans <- table(simple_vector[-length(simple_vector)],"
"0","                         simple_vector[-1])"
"0","    joined_trans_matrix <- table_trans / rowSums(table_trans)"
"0",""
"0",""
"0","    # Variance and mean in the original classification of MESA states"
"0","    df_var <- df_old %>%  "
"0","        mutate(rests = if_else(interval == ""ACTIVE"", ""ACTIVE"", ""REST"")) %>% "
"0","        group_by(rests) %>%"
"0","        summarise(mean_act = mean(activity), var_act = var(activity), "
"0","                  .groups = ""drop"") "
"0","    "
"0","    # Add states mean"
"0","    df_summary1 <- df_ord %>% group_by(ID, state_order) %>% "
"0","        summarise(mean_state = round(mean(.data[[""act5_mean""]]),"
"0","                                     digits = 2), .groups = ""drop"") %>% "
"0","        pivot_wider(names_from = state_order, names_prefix = ""state_mean"", "
"0","                    values_from = mean_state) %>% "
"0","        mutate("
"0","            sleep_integral = round(sleep_amount, digits = 2),"
"0","            stay_sleep = round(joined_trans_matrix[1, 1], digits = 2),"
"0","            stay_awake = round(joined_trans_matrix[2, 2], digits = 2),"
"0","            centre_point = centre,"
"0","            amplitude = amp,"
"0","            accuracy_acti = accur,"
"0","            accuracy_psg = accur_psg,"
"0","            zero_prop = gamma_stats[3, 1],"
"0","            median_limit = median(dt$act5_mean),"
"0","            mean_active = round_func(select(filter(df_var, rests == ""ACTIVE""),"
"0","                                            mean_act)),"
"0","            mean_rest = round_func(select(filter(df_var, rests == ""REST""),"
"0","                                          mean_act)),"
"0","            var_active = round_func(select(filter(df_var, rests == ""ACTIVE""),"
"0","                                           var_act)),"
"0","            var_rest = round_func(select(filter(df_var, rests == ""REST""),"
"0","                                         var_act)),"
"0","            ri = round(ri2, digits = 2)"
"0","        ) "
"0",""
"0","    return(df_summary1)"
"0","}"
"0",""
"0","empty_df <- function(person_nb){"
"0","    print(""NO SUMMARY STATISTICS ADDED, MODEL DID NOT CONVERGE"")"
"0",""
"0","    dt <- data.frame("
"0","        ID = person_nb,"
"0","        state_mean1 = NA,"
"0","        state_mean2 = NA,"
"0","        state_mean3 = NA,"
"0","        sleep_integral = NA,"
"0","        stay_sleep = NA,"
"0","        stay_awake = NA,"
"0","        centre_point = NA,"
"0","        amplitude = NA,"
"0","        accuracy_acti = NA,"
"0","        accuracy_psg = NA,"
"0","        zero_prop = NA,"
"0","        median_limit = NA,"
"0","        mean_active = NA,"
"0","        mean_rest = NA,"
"0","        var_active = NA,"
"0","        var_rest = NA,"
"0","        ri = NA"
"0","    )"
"0","}"
