"0",""
"0","    # Fit a loess model to estimate probability of over half of rest"
"0","    loess_model <- loess(mean_prob ~ as.numeric(dt5), data = df_prob)"
"0","    y_pred <- predict(loess_model) %>% round(digits = 2)"
"0","    halfs0 <- which(y_pred == 0.5)"
"0","    if (length(halfs0) == 1 || all(diff(halfs0) == 1)) {"
"0","        y_pred <- y_pred %>% round(digits = 1)"
"0","    }"
"0","    max_y <- min(max(y_pred), 1)"
"0","    min_y <- max(0, min(y_pred))"
"0","    amp <- max_y - min_y"
"0","    halfs <- which(y_pred == 0.5)"
"0","    start_end = c(halfs[1], halfs[length(halfs)])"
"0","    if (y_pred[288] > 0.5){"
"0","        index_centre = start_end[2] + (start_end[1] + 288 - start_end[2])/2"
"0","    } else {"
"0","    index_centre <- floor(sum(start_end) / 2)"
"0","    }"
"0","    if (length(halfs) == 0){"
"0","        centre <- NA"
"0","        ri2 <- NA"
"0","    } else {"
"0","        centre <- hm(format(df_prob$dt5[index_centre], format = ""%H:%M""))"
"0","        # Rhythm index"
"0","        ri_vctr <- df_prob$mean_prob[halfs[1]:halfs[length(halfs)]]"
"0","        diff_ri <- rep(diff(df_prob$tm)[1], length(ri_vctr) - 1)"
"0","        ri1 <- sum(diff_ri * (head(ri_vctr,-1) + tail(ri_vctr,-1)))/2"
"0","        ri2 <- 24*(ri1/sleep_amount - sleep_amount/24)/(24 - sleep_amount)  "
"0","    }    "
"0","    "
"0","    # Active states"
"0","    active_states <- df_order %>% filter(mean_state > sleep_limit) %>% "
"0","        select(state_order) %>% unlist(use.names = FALSE)"
"0","    "
"0","    # Filter for observations with PSG available"
"0","    df_psg <- df_ord %>% filter(!is.na(sleep_psg)) %>% "
"0","        mutate(my_class = if_else(state_order %in% active_states, "
"0","                                  ""ACTIVE"", ""REST""), .keep = ""unused"")"
"0","    "
"0","    # Confusion matrix for PSG"
"0","    psg_mtr <- table(df_psg$sleep_psg, df_psg$my_class)"
"0","    # Accuracy for PSG"
"0","    accur_psg <- ((sum(psg_mtr[rownames(psg_mtr) == ""REST"" & colnames(psg_mtr) == ""REST""],"
"0","                       psg_mtr[rownames(psg_mtr) == ""ACTIVE"" & colnames(psg_mtr) == ""ACTIVE""], na.rm = TRUE)) / sum(psg_mtr)) %>% "
"0","        round(digits = 2)"
"0",""
"0","    # Print PSG classifications side by side with HMM classifications"
"0","    print(df_psg %>% "
"0","    select(dt5, act5_mean_sqrt, sleep_psg, my_class) %>% "
"0","    pivot_longer(cols = c(sleep_psg, my_class), names_to = ""type"","
"0","                 values_to = ""state"") %>% "
"0","    ggplot() + geom_point(aes(x = dt5, y = act5_mean_sqrt, col = state)) +"
"0","    facet_wrap(vars(type)) +"
"0","        ggtitle(""HMM classification vs PSG classification""))    "
