{
    "type": [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        2
    ],
    "data": [
        "    geom_point(aes(x = dt5, y = act5_mean_sqrt, col = state)) +",
        "+ ",
        "    facet_wrap(vars(type)) +",
        "+ ",
        "        ggtitle(\"HMM classification vs PSG classification\"))    ",
        "+ ",
        "    ",
        "+ ",
        "    big_df_states <- new_df %>% select(state_order, dt5) %>% ",
        "+ ",
        "        full_join(old_df, by = \"dt5\") ",
        "+ ",
        "    ",
        "+ ",
        "    conf_matrix <- table(big_df_states$state_order, ",
        "+ ",
        "                         big_df_states$interval) %>% ",
        "+ ",
        "        as.data.frame() %>% ",
        "+ ",
        "        filter(Var2 %in% c(\"ACTIVE\", \"REST\", \"REST-S\")) %>% ",
        "+ ",
        "        mutate(classification = if_else(Var2 == \"ACTIVE\", \"ACTIVE\", \"REST\"),",
        "+ ",
        "               state = if_else(Var1 %in% active_states, \"ACTIVE\", \"REST\"),",
        "+ ",
        "               .keep = \"unused\") %>% ",
        "+ ",
        "        group_by(state, classification) %>% ",
        "+ ",
        "        summarise(freq = sum(Freq), .groups = \"drop\") %>% ",
        "+ ",
        "        pivot_wider(names_from = classification, values_from = freq)",
        "+ ",
        "",
        "+ ",
        "    accur <- ((filter(conf_matrix, state == \"ACTIVE\") %>% ungroup() %>% ",
        "+ ",
        "                   select(ACTIVE) + ",
        "+ ",
        "                   filter(conf_matrix, state == \"REST\") %>% ungroup() %>% ",
        "+ ",
        "                   select(REST)) / nrow(old_df)) %>% as.numeric() %>% ",
        "+ ",
        "        round(digits = 2)",
        "+ ",
        "",
        "+ ",
        "    return(c(accur, accur_psg))",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Adding a summary of the HMM model",
        "> ",
        "summary_func <- function(df_old, dt, df_ordered, aic_mtr){",
        "+ ",
        "    nb_states <- nrow(df_ordered)",
        "+ ",
        "    ordered_matrix = matrix(0, nrow = nb_states, ncol = nb_states)",
        "+ ",
        "    for (i in 1:nb_states){",
        "+ ",
        "        for (j in 1:nb_states){",
        "+ ",
        "            ordered_matrix[i, j] = prob_matrix[df_order$states[i], ",
        "+ ",
        "                                               df_order$states[j]]           ",
        "+ ",
        "        }",
        "+ ",
        "    }",
        "+ ",
        "    rest_states <- df_order %>% filter(mean_state < sleep_limit) %>% ",
        "+ ",
        "        select(state_order) %>% unlist(use.names = FALSE)    ",
        "+ ",
        "    ",
        "+ ",
        "",
        "+ ",
        "    joined_matrix = matrix(0, nrow = 2, ncol = 2)",
        "+ ",
        "    if (nb_states == 2){",
        "+ ",
        "        joined_matrix == ordered_matrix",
        "+ ",
        "    } else if (nb_states == 3){",
        "+ ",
        "        if (length(rest_states) == 1) {",
        "+ ",
        "            joined_matrix[1, 1] = ordered_matrix[1, 1]",
        "+ ",
        "            joined_matrix[1, 2] = ordered_matrix[1, 2] + ordered_matrix[1, 3]",
        "+ ",
        "            joined_matrix[2, 1] = ordered_matrix[2, 1] + ordered_matrix[3, 1]",
        "+ ",
        "            joined_matrix[2, 2] = 1 - joined_matrix[2, 1]",
        "+ ",
        "        } else if (length(rest_states) == 2) {",
        "+ ",
        "            joined_matrix[2, 2] = ordered_matrix[3, 3]",
        "+ ",
        "            joined_matrix[2, 1] = ordered_matrix[3, 2] + ordered_matrix[3, 1]",
        "+ ",
        "            joined_matrix[1, 2] = ordered_matrix[1, 3] + ordered_matrix[2, 3]",
        "+ ",
        "            joined_matrix[1, 1] = 1 - joined_matrix[1, 2]",
        "+ ",
        "        }",
        "+ ",
        "    }",
        "+ ",
        "",
        "+ ",
        "    df_var <- df_old %>%  ",
        "+ ",
        "        mutate(rests = if_else(interval == \"ACTIVE\", \"ACTIVE\", \"REST\")) %>% ",
        "+ ",
        "        group_by(rests) %>%",
        "+ ",
        "        summarise(mean_act = mean(activity), var_act = var(activity), ",
        "+ ",
        "                  .groups = \"drop\") ",
        "+ ",
        "    ",
        "+ ",
        "    df_summary1 <- dt %>% filter(state_order %in% rest_states) %>% ",
        "+ ",
        "        group_by(ID, date(dt5)) %>% ",
        "+ ",
        "        summarise(time_asleep = 5 * n() / 60, .groups = \"drop\") %>% ",
        "+ ",
        "        group_by(ID) %>% ",
        "+ ",
        "        summarise(daily_sleep = round(mean(time_asleep), digits = 1),",
        "+ ",
        "                  .groups = \"drop\") %>% ",
        "+ ",
        "        mutate(",
        "+ ",
        "            stay_sleep = joined_matrix[1, 1],",
        "+ ",
        "            centre_point = hm(format(centre, format = \"%H:%M\")),",
        "+ ",
        "            accuracy_actigraph = confusion[1],",
        "+ ",
        "            accuracy_psg = confusion[2],",
        "+ ",
        "            zero_prop = gamma_stats[3, 1],",
        "+ ",
        "            m2 = aic_mtr[1, 1],",
        "+ ",
        "            m3 = aic_mtr[2, 1],",
        "+ ",
        "            m4 = aic_mtr[3, 1],",
        "+ ",
        "            mean_active = as.numeric(select(filter(df_var, rests == \"ACTIVE\"),",
        "+ ",
        "                                            mean_act)),",
        "+ ",
        "            mean_rest = as.numeric(select(filter(df_var, rests == \"REST\"),",
        "+ ",
        "                                          mean_act)),",
        "+ ",
        "            var_active = as.numeric(select(filter(df_var, rests == \"ACTIVE\"),",
        "+ ",
        "                                           var_act)),",
        "+ ",
        "            var_rest = as.numeric(select(filter(df_var, rests == \"REST\"),",
        "+ ",
        "                                         var_act))",
        "+ ",
        "        ) ",
        "+ ",
        "    ",
        "+ ",
        "    df_summary2 <- dt %>% group_by(state_order) %>% ",
        "+ ",
        "        summarise(mean_state = round(mean(.data[[\"act5_mean\"]]),",
        "+ ",
        "                                     digits = 2), .groups = \"drop\") %>% ",
        "+ ",
        "        pivot_wider(names_from = state_order, names_prefix = \"state_mean\", ",
        "+ ",
        "                    values_from = mean_state) %>% ",
        "+ ",
        "        cbind(df_summary1)",
        "+ ",
        "",
        "+ ",
        "    return(df_summary2)",
        "+ ",
        "}",
        "> ",
        "df <- read_func(\"mesa-sleep-0001.csv\")",
        "> ",
        "df2 <- add_summary(df)",
        "> ",
        "mods <- plot_step(df2, \"act5_mean\", nb_iter = 15)",
        "[1] \"Did not find a HMM for 4 states\"\n",
        "> ",
        "mods",
        "$m2\nValue of the maximum log-likelihood: -8516.523 \n\nStep length parameters:\n----------------------\n               state 1      state 2\nmean      7.085561e+17 5.120233e+01\nsd        3.644436e-14 6.147377e+01\nzero-mass 1.000000e+00 1.091628e-08\n\n\nRegression coeffs for the transition probabilities:\n--------------------------------------------------\n             1 -> 2    2 -> 1\nintercept 0.2425526 -3.206493\n\nTransition probability matrix:\n-----------------------------\n           [,1]      [,2]\n[1,] 0.43965740",
        " 0.5603426\n[2,] 0.03892212 0.9610779\n\nInitial distribution:\n--------------------\n[1] 7.116306e-08 9.999999e-01\n\n$m3\nValue of the maximum log-likelihood: -8327.827 \n\nStep length parameters:\n----------------------\n             state 1      state 2      state 3\nmean      17.5053868 1.122931e+02 3.223520e+01\nsd        22.2914614 7.947916e+01 3.188201e+01\nzero-mass  0.2002286 1.001521e-08 1.001065e-08\n\n\nRegression coeffs for the transition probabilities:\n--------------------------------------------------\n         ",
        "    1 -> 2   1 -> 3    2 -> 1     2 -> 3    3 -> 1\nintercept -3.707226 -28.2442 -3.163433 -0.8668256 -15.82831\n             3 -> 2\nintercept -1.445963\n\nTransition probability matrix:\n-----------------------------\n             [,1]       [,2]         [,3]\n[1,] 9.760425e-01 0.02395747 5.286525e-13\n[2,] 2.890836e-02 0.68373081 2.873608e-01\n[3,] 1.081440e-07 0.19062369 8.093762e-01\n\nInitial distribution:\n--------------------\n[1] 4.704947e-06 2.297936e-06 9.999930e-01\n\n$m4\nNULL\n\n",
        "> ",
        "aic1 <- AIC(mods$m2, mods$m3, mods$m4) %>% arrange(Model) %>% ",
        "+ ",
        "    mutate(aic_model = paste(Model, round(AIC)), .keep = \"none\")",
        "> ",
        "aic1",
        "   aic_model\n1   m2 16690\n2 mods 17051\n",
        "> ",
        "aic2 <- ",
        "+ ",
        "    ",
        "+ ",
        "    AIC(mods$m2, mods$m3, mods$m4) ",
        "> ",
        "# aic2 <- ",
        "> ",
        "    AIC(mods$m2, mods$m3, mods$m4) ",
        "> ",
        "AIC(mods$m2, mods$m3, mods$m4)",
        "  Model      AIC\n1    m2 16689.65\n2  mods 17051.05\n",
        "> ",
        "AIC(mods$m2, mods$m3)",
        "  Model      AIC\n1    m2 16689.65\n2  mods 17051.05\n",
        "> ",
        "AIC(mods$m3, mods$m2)",
        "  Model      AIC\n1  mods 16689.65\n2    m3 17051.05\n",
        "> ",
        "mods$m3",
        "Value of the maximum log-likelihood: -8327.827 \n\nStep length parameters:\n----------------------\n             state 1      state 2      state 3\nmean      17.5053868 1.122931e+02 3.223520e+01\nsd        22.2914614 7.947916e+01 3.188201e+01\nzero-mass  0.2002286 1.001521e-08 1.001065e-08\n\n\nRegression coeffs for the transition probabilities:\n--------------------------------------------------\n             1 -> 2   1 -> 3    2 -> 1     2 -> 3    3 -> 1\nintercept -3.707226 -28.2442 -3.163433 -0.8668256 -15.82831\n         ",
        "    3 -> 2\nintercept -1.445963\n\nTransition probability matrix:\n-----------------------------\n             [,1]       [,2]         [,3]\n[1,] 9.760425e-01 0.02395747 5.286525e-13\n[2,] 2.890836e-02 0.68373081 2.873608e-01\n[3,] 1.081440e-07 0.19062369 8.093762e-01\n\nInitial distribution:\n--------------------\n[1] 4.704947e-06 2.297936e-06 9.999930e-01\n",
        "> ",
        "mods$m2",
        "Value of the maximum log-likelihood: -8516.523 \n\nStep length parameters:\n----------------------\n               state 1      state 2\nmean      7.085561e+17 5.120233e+01\nsd        3.644436e-14 6.147377e+01\nzero-mass 1.000000e+00 1.091628e-08\n\n\nRegression coeffs for the transition probabilities:\n--------------------------------------------------\n             1 -> 2    2 -> 1\nintercept 0.2425526 -3.206493\n\nTransition probability matrix:\n-----------------------------\n           [,1]      [,2]\n[1,] 0.43965740 0.5603426",
        "\n[2,] 0.03892212 0.9610779\n\nInitial distribution:\n--------------------\n[1] 7.116306e-08 9.999999e-01\n",
        "> ",
        "m2 <- mods$m2",
        "> ",
        "m3 <- mods$m3",
        "> ",
        "AIC(m2, m3)",
        "  Model      AIC\n1    m3 16689.65\n2    m2 17051.05\n",
        "> ",
        "AIC(mods$m2, mods$m3)",
        "  Model      AIC\n1    m2 16689.65\n2  mods 17051.05\n",
        "> ",
        "AIC(mods$m2, mods$m3, mods$m4)",
        "  Model      AIC\n1    m2 16689.65\n2  mods 17051.05\n",
        "> ",
        "?AIC",
        "> ",
        "",
        "> ",
        "knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = FALSE, ",
        "+ ",
        "                      message = FALSE)",
        "> ",
        "knitr::opts_knit$set(root.dir = '/home/janique/mesa/actigraphy')",
        "> ",
        "library(methods)",
        "> ",
        "library(XML)",
        "> ",
        "library(moveHMM)",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(lubridate)",
        "> ",
        "set.seed(1337)",
        "> ",
        "# Threshold between rest and active states",
        "> ",
        "sleep_limit <- 50",
        "> ",
        "",
        "> ",
        "# Dataset for overlap between PSG and actigraphy",
        "> ",
        "overlap <- read_csv(\"/home/janique/mesa/overlap/mesa-actigraphy-psg-overlap.csv\",",
        "+ ",
        "                    col_types = cols_only(",
        "+ ",
        "                        mesaid = col_integer(),",
        "+ ",
        "                        line = col_integer()",
        "+ ",
        "                    )) ",
        "> ",
        "",
        "> ",
        "# Function for importing actigraphy",
        "> ",
        "read_func <- function(nm) {",
        "+ ",
        "    dt <- read_csv(nm,",
        "+ ",
        "             col_types = cols_only(",
        "+ ",
        "                 mesaid = col_integer(),",
        "+ ",
        "                 linetime = col_time(),",
        "+ ",
        "                 offwrist = col_integer(),",
        "+ ",
        "                 activity = col_double(),",
        "+ ",
        "                 marker = col_integer(),",
        "+ ",
        "                 whitelight = col_double(),",
        "+ ",
        "                 wake = col_factor(),",
        "+ ",
        "                 interval = col_factor(),",
        "+ ",
        "                 daybymidnight = col_integer(),",
        "+ ",
        "                 daybynoon = col_integer()",
        "+ ",
        "             )) ",
        "+ ",
        "    ",
        "+ ",
        "    # Subsetting the subject's ID",
        "+ ",
        "    id <- unique(dt$mesaid)",
        "+ ",
        "    ",
        "+ ",
        "    # Extracting the starting point for PSG from the overlap dataset",
        "+ ",
        "    start_index <- overlap %>% filter(mesaid == id) %>% select(line) %>%",
        "+ ",
        "        as.numeric()",
        "+ ",
        "    ",
        "+ ",
        "    lead_zero <- str_extract(nm, \"\\\\d+\")",
        "+ ",
        "    xml_file <- paste(\"/home/janique/mesa/polysomnography/annotations-events-profusion/mesa-sleep-\", lead_zero, \"-profusion.xml\", sep = \"\")",
        "+ ",
        "    ",
        "+ ",
        "    xml1 <- xmlParse(file = xml_file) ",
        "+ ",
        "    r <- xmlRoot(xml1)",
        "+ ",
        "    ",
        "+ ",
        "    sleep_stages <- r[\"SleepStages\"] %>% unlist(use.names = FALSE) %>% ",
        "+ ",
        "    xmlValue(trim = TRUE) %>% ",
        "+ ",
        "    str_split(pattern = \"\")",
        "+ ",
        "    ",
        "+ ",
        "    len_stages <- length(sleep_stages[[1]])",
        "+ ",
        "    ",
        "+ ",
        "    df_psg <- tibble(",
        "+ ",
        "        psg_stage = c(rep(NaN, start_index), as.numeric(sleep_stages[[1]]),",
        "+ ",
        "                      rep(NaN, ",
        "+ ",
        "                          nrow(dt) - start_index - len_stages))",
        "+ ",
        "    )    ",
        "+ ",
        "    ",
        "+ ",
        "    df_overlap <- dt %>% cbind(df_psg) %>% ",
        "+ ",
        "        filter(offwrist == 0 & !is.na(activity) & daybymidnight < 8) %>% ",
        "+ ",
        "        mutate(",
        "+ ",
        "            hr = hour(linetime),",
        "+ ",
        "            date_var = ymd(\"1960-01-01\") + days(daybymidnight),",
        "+ ",
        "            dt = ymd_hms(paste(date_var, linetime)),",
        "+ ",
        "            dt5 = floor_date(dt, unit = \"5 minutes\"),",
        "+ ",
        "            mins5 = hms(format(dt5, format = \"%H:%M:%S\")),",
        "+ ",
        "            psg01 = if_else(is.na(psg_stage), NaN,",
        "+ ",
        "                            if_else(psg_stage == 0, 0, 1))",
        "+ ",
        "        ) %>% ",
        "+ ",
        "        rename(ID = mesaid)",
        "+ ",
        "    ",
        "+ ",
        "    return(df_overlap)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Function for adding average",
        "> ",
        "add_summary <- function(dt) {",
        "+ ",
        "    dt_sum <- dt %>% select(ID, activity, dt5, psg01) %>% ",
        "+ ",
        "        group_by(ID, dt5) %>% ",
        "+ ",
        "        summarise(act5_mean = mean(activity),",
        "+ ",
        "                  act5_mean_sqrt = sqrt(act5_mean),",
        "+ ",
        "                  psg_mean = mean(psg01),",
        "+ ",
        "                  sleep_psg = if_else(psg_mean > 0.5, \"REST\", \"ACTIVE\"),",
        "+ ",
        "                  dummy = 0, .groups = \"drop\")",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Function for adding the HMM model",
        "> ",
        "plot_step <- function(dt, variab, nb_iter = 5) {",
        "+ ",
        "    df_prep <- dt %>%",
        "+ ",
        "    select(all_of(c(variab, \"dummy\", \"ID\"))) %>% ",
        "+ ",
        "    as.data.frame() %>% ",
        "+ ",
        "    prepData(type = \"UTM\", coordNames = c(variab, \"dummy\"))",
        "+ ",
        "",
        "+ ",
        "    print(filter(df_prep, !is.na(step)) %>% ggplot() + ",
        "+ ",
        "              geom_histogram(aes(x = step), bins = 30) +",
        "+ ",
        "              labs(x = \"Difference\", ",
        "+ ",
        "                   title = \"Histogram of consecutive activity differences\")",
        "+ ",
        "            )",
        "+ ",
        "    ",
        "+ ",
        "    quant <- quantile(df_prep$step, na.rm = TRUE, names = FALSE)",
        "+ ",
        "    varian <- var(df_prep$step, na.rm = TRUE)",
        "+ ",
        "    std <- sqrt(varian)",
        "+ ",
        "    minima <- matrix(0, nrow = 3, ncol = nb_iter)",
        "+ ",
        "    ",
        "+ ",
        "    for (i in 2:4) {",
        "+ ",
        "        zeromass0 <- c(0.5, rep(0, i - 1))",
        "+ ",
        "        minim <- Inf",
        "+ ",
        "        for (j in 1:nb_iter) {",
        "+ ",
        "            mu0 <- sort(runif(i, quant[2], quant[4]))",
        "+ ",
        "            sigma0 <- sort(runif(i, std, varian))",
        "+ ",
        "            stepPar0 <- c(mu0, sigma0, zeromass0)        ",
        "+ ",
        "            mod <- fitHMM(data = df_prep, nbStates = i, stepPar0 = stepPar0,",
        "+ ",
        "                          angleDist = \"none\", stepDist = \"gamma\")         ",
        "+ ",
        "            new_minim <- mod$mod$minimum",
        "+ ",
        "            minima[i - 1, j] <- new_minim",
        "+ ",
        "            enough_states <- table(viterbi(mod))",
        "+ ",
        "",
        "+ ",
        "          if (new_minim < minim && length(enough_states) == i) {",
        "+ ",
        "                assign(paste(\"m\", i, sep = \"\"), mod)",
        "+ ",
        "                minim <- new_minim",
        "+ ",
        "          }",
        "+ ",
        "            ",
        "+ ",
        "        }",
        "+ ",
        "        if (is.infinite(minim)) {",
        "+ ",
        "            assign(paste(\"m\", i, sep = \"\"), NULL)",
        "+ ",
        "            print(paste(\"Did not find a HMM for\", i, \"states\"))",
        "+ ",
        "        }",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    return(list(\"m2\" = m2, \"m3\" = m3, \"m4\" = m4))",
        "+ ",
        "    ",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "choose_model <- function(models) {",
        "+ ",
        "    m2 <- models$m2",
        "+ ",
        "    m3 <- models$m3",
        "+ ",
        "    m4 <- models$m4",
        "+ ",
        "    aic <- AIC(m2, m3, m4)",
        "+ ",
        "    low_aic <- aic %>% arrange(AIC, Model) %>% select(Model) %>% slice(1) %>%",
        "+ ",
        "        as.character()",
        "+ ",
        "    final_mod <- eval(as.name(low_aic))",
        "+ ",
        "    return(final_mod)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Function for ordering states from smallest average to largest",
        "> ",
        "func_order <- function(mod, dt, variab) {",
        "+ ",
        "    states <- viterbi(mod)",
        "+ ",
        "    df_states <- cbind(dt, states)",
        "+ ",
        "    df_order <- df_states %>% group_by(states) %>% ",
        "+ ",
        "        summarise(mean_state = mean(.data[[variab]]), .groups = \"drop\") %>% ",
        "+ ",
        "        arrange(mean_state) %>% ",
        "+ ",
        "        mutate(state_order = row_number())",
        "+ ",
        "    ",
        "+ ",
        "    return(df_order)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Function for plotting states",
        "> ",
        "plot_states <- function(dt, mod, df_ordered, variab) {",
        "+ ",
        "    states <- viterbi(mod)",
        "+ ",
        "    df_states <- cbind(dt, states)",
        "+ ",
        "    ",
        "+ ",
        "    df_ord <- df_ordered %>% select(states, state_order) %>% ",
        "+ ",
        "        right_join(df_states, by = \"states\") %>% ",
        "+ ",
        "        select(-states) %>% arrange(dt5)",
        "+ ",
        "    ",
        "+ ",
        "    print(ggplot(df_ord, aes_string(x = \"dt5\", y = variab)) + ",
        "+ ",
        "              geom_point(aes(col = as.factor(state_order)), ",
        "+ ",
        "                         size = 0.5, alpha = 0.7) +",
        "+ ",
        "              scale_x_datetime(date_breaks = \"4 hours\",",
        "+ ",
        "                               date_labels = \"%H:%M\") +",
        "+ ",
        "              facet_wrap(vars(date(dt5)), scales = \"free_x\", ncol = 4) +",
        "+ ",
        "              ggtitle(\"Plot of the states of HMM\") +",
        "+ ",
        "              labs(col = \"State\", x = \"Date and time\") +",
        "+ ",
        "              theme(legend.position = c(1, 0), ",
        "+ ",
        "                    legend.justification = c(1, 0),",
        "+ ",
        "                    axis.text.x = element_text(size = 6)))",
        "+ ",
        "    return(df_ord)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Function for plotting probability of sleep",
        "> ",
        "prob_sleep <- function(mod, dt, df_ordered) {",
        "+ ",
        "    ",
        "+ ",
        "    probs_states <- stateProbs(mod)",
        "+ ",
        "    rest_states_raw <- df_ordered %>% filter(mean_state < sleep_limit) %>% ",
        "+ ",
        "        select(states) %>% unlist(use.names = FALSE)",
        "+ ",
        "    df_probs <- tibble(",
        "+ ",
        "        asleep = rowSums(probs_states[1:nrow(df2), rest_states_raw])",
        "+ ",
        "        ) %>% cbind(dt) %>% ",
        "+ ",
        "        left_join(select(df, dt5, hr), by = \"dt5\")  %>%     ",
        "+ ",
        "        mutate(new_date = if_else(hr >= 12, \"1960-01-01\", \"1960-01-02\"))",
        "+ ",
        "    ",
        "+ ",
        "    date(df_probs$dt5) = ymd(df_probs$new_date)",
        "+ ",
        "",
        "+ ",
        "    df_prob <- df_probs %>% group_by(dt5) %>%",
        "+ ",
        "          summarise(mean_prob = mean(asleep), .groups = \"drop\") ",
        "+ ",
        "",
        "+ ",
        "    print(df_prob %>% ggplot(aes(x = dt5, y = mean_prob)) +",
        "+ ",
        "              geom_line() +",
        "+ ",
        "              geom_smooth(method = \"loess\", formula = y ~ x,  se = FALSE) +",
        "+ ",
        "              scale_x_datetime(date_labels = \"%H:%M\") +",
        "+ ",
        "              labs(title = \"Probability of sleep\", x = \"Time\",",
        "+ ",
        "                   y = \"Mean probability\"))",
        "+ ",
        "",
        "+ ",
        "    loess_model <- loess(mean_prob ~ as.numeric(dt5), data = df_prob)",
        "+ ",
        "    y_pred <- predict(loess_model) %>% round(digits = 2)",
        "+ ",
        "    halfs <- which(y_pred == 0.5)",
        "+ ",
        "    start_end = c(halfs[1], halfs[length(halfs)])",
        "+ ",
        "    index_centre <- floor(sum(start_end) / 2)",
        "+ ",
        "    return(df_prob$dt5[index_centre])",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Function for calculating accuracy",
        "> ",
        "accur_calc <- function(old_df, new_df) {",
        "+ ",
        "    active_states <- df_order %>% filter(mean_state > sleep_limit) %>% ",
        "+ ",
        "        select(state_order) %>% unlist(use.names = FALSE)",
        "+ ",
        "    ",
        "+ ",
        "    print(paste(\"Active states' numbers:\", active_states))",
        "+ ",
        "    df_psg <- new_df %>% filter(!is.na(sleep_psg)) %>% ",
        "+ ",
        "        mutate(my_class = if_else(state_order %in% active_states, ",
        "+ ",
        "                                  \"ACTIVE\", \"REST\"), .keep = \"unused\")",
        "+ ",
        "    psg_mtr <- table(df_psg$sleep_psg, df_psg$my_class)",
        "+ ",
        "    accur_psg <- ((psg_mtr[1, 1] + psg_mtr[2, 2]) / sum(psg_mtr)) %>% ",
        "+ ",
        "        round(digits = 2)",
        "+ ",
        "",
        "+ ",
        "    print(df_psg %>% ",
        "+ ",
        "    select(dt5, act5_mean_sqrt, sleep_psg, my_class) %>% ",
        "+ ",
        "    pivot_longer(cols = c(sleep_psg, my_class), names_to = \"type\",",
        "+ ",
        "                 values_to = \"state\") %>% ",
        "+ ",
        "    ggplot() +",
        "+ ",
        "    geom_point(aes(x = dt5, y = act5_mean_sqrt, col = state)) +",
        "+ ",
        "    facet_wrap(vars(type)) +",
        "+ ",
        "        ggtitle(\"HMM classification vs PSG classification\"))    ",
        "+ ",
        "    ",
        "+ ",
        "    big_df_states <- new_df %>% select(state_order, dt5) %>% ",
        "+ ",
        "        full_join(old_df, by = \"dt5\") ",
        "+ ",
        "    ",
        "+ ",
        "    conf_matrix <- table(big_df_states$state_order, ",
        "+ ",
        "                         big_df_states$interval) %>% ",
        "+ ",
        "        as.data.frame() %>% ",
        "+ ",
        "        filter(Var2 %in% c(\"ACTIVE\", \"REST\", \"REST-S\")) %>% ",
        "+ ",
        "        mutate(classification = if_else(Var2 == \"ACTIVE\", \"ACTIVE\", \"REST\"),",
        "+ ",
        "               state = if_else(Var1 %in% active_states, \"ACTIVE\", \"REST\"),",
        "+ ",
        "               .keep = \"unused\") %>% ",
        "+ ",
        "        group_by(state, classification) %>% ",
        "+ ",
        "        summarise(freq = sum(Freq), .groups = \"drop\") %>% ",
        "+ ",
        "        pivot_wider(names_from = classification, values_from = freq)",
        "+ ",
        "",
        "+ ",
        "    accur <- ((filter(conf_matrix, state == \"ACTIVE\") %>% ungroup() %>% ",
        "+ ",
        "                   select(ACTIVE) + ",
        "+ ",
        "                   filter(conf_matrix, state == \"REST\") %>% ungroup() %>% ",
        "+ ",
        "                   select(REST)) / nrow(old_df)) %>% as.numeric() %>% ",
        "+ ",
        "        round(digits = 2)",
        "+ ",
        "",
        "+ ",
        "    return(c(accur, accur_psg))",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Adding a summary of the HMM model",
        "> ",
        "summary_func <- function(df_old, dt, df_ordered, aic_mtr){",
        "+ ",
        "    nb_states <- nrow(df_ordered)",
        "+ ",
        "    ordered_matrix = matrix(0, nrow = nb_states, ncol = nb_states)",
        "+ ",
        "    for (i in 1:nb_states){",
        "+ ",
        "        for (j in 1:nb_states){",
        "+ ",
        "            ordered_matrix[i, j] = prob_matrix[df_order$states[i], ",
        "+ ",
        "                                               df_order$states[j]]           ",
        "+ ",
        "        }",
        "+ ",
        "    }",
        "+ ",
        "    rest_states <- df_order %>% filter(mean_state < sleep_limit) %>% ",
        "+ ",
        "        select(state_order) %>% unlist(use.names = FALSE)    ",
        "+ ",
        "    ",
        "+ ",
        "",
        "+ ",
        "    joined_matrix = matrix(0, nrow = 2, ncol = 2)",
        "+ ",
        "    if (nb_states == 2){",
        "+ ",
        "        joined_matrix == ordered_matrix",
        "+ ",
        "    } else if (nb_states == 3){",
        "+ ",
        "        if (length(rest_states) == 1) {",
        "+ ",
        "            joined_matrix[1, 1] = ordered_matrix[1, 1]",
        "+ ",
        "            joined_matrix[1, 2] = ordered_matrix[1, 2] + ordered_matrix[1, 3]",
        "+ ",
        "            joined_matrix[2, 1] = ordered_matrix[2, 1] + ordered_matrix[3, 1]",
        "+ ",
        "            joined_matrix[2, 2] = 1 - joined_matrix[2, 1]",
        "+ ",
        "        } else if (length(rest_states) == 2) {",
        "+ ",
        "            joined_matrix[2, 2] = ordered_matrix[3, 3]",
        "+ ",
        "            joined_matrix[2, 1] = ordered_matrix[3, 2] + ordered_matrix[3, 1]",
        "+ ",
        "            joined_matrix[1, 2] = ordered_matrix[1, 3] + ordered_matrix[2, 3]",
        "+ ",
        "            joined_matrix[1, 1] = 1 - joined_matrix[1, 2]",
        "+ ",
        "        }",
        "+ ",
        "    }",
        "+ ",
        "",
        "+ ",
        "    df_var <- df_old %>%  ",
        "+ ",
        "        mutate(rests = if_else(interval == \"ACTIVE\", \"ACTIVE\", \"REST\")) %>% ",
        "+ ",
        "        group_by(rests) %>%",
        "+ ",
        "        summarise(mean_act = mean(activity), var_act = var(activity), ",
        "+ ",
        "                  .groups = \"drop\") ",
        "+ ",
        "    ",
        "+ ",
        "    df_summary1 <- dt %>% filter(state_order %in% rest_states) %>% ",
        "+ ",
        "        group_by(ID, date(dt5)) %>% ",
        "+ ",
        "        summarise(time_asleep = 5 * n() / 60, .groups = \"drop\") %>% ",
        "+ ",
        "        group_by(ID) %>% ",
        "+ ",
        "        summarise(daily_sleep = round(mean(time_asleep), digits = 1),",
        "+ ",
        "                  .groups = \"drop\") %>% ",
        "+ ",
        "        mutate(",
        "+ ",
        "            stay_sleep = joined_matrix[1, 1],",
        "+ ",
        "            centre_point = hm(format(centre, format = \"%H:%M\")),",
        "+ ",
        "            accuracy_actigraph = confusion[1],",
        "+ ",
        "            accuracy_psg = confusion[2],",
        "+ ",
        "            zero_prop = gamma_stats[3, 1],",
        "+ ",
        "            m2 = aic_mtr[1, 1],",
        "+ ",
        "            m3 = aic_mtr[2, 1],",
        "+ ",
        "            m4 = aic_mtr[3, 1],",
        "+ ",
        "            mean_active = as.numeric(select(filter(df_var, rests == \"ACTIVE\"),",
        "+ ",
        "                                            mean_act)),",
        "+ ",
        "            mean_rest = as.numeric(select(filter(df_var, rests == \"REST\"),",
        "+ ",
        "                                          mean_act)),",
        "+ ",
        "            var_active = as.numeric(select(filter(df_var, rests == \"ACTIVE\"),",
        "+ ",
        "                                           var_act)),",
        "+ ",
        "            var_rest = as.numeric(select(filter(df_var, rests == \"REST\"),",
        "+ ",
        "                                         var_act))",
        "+ ",
        "        ) ",
        "+ ",
        "    ",
        "+ ",
        "    df_summary2 <- dt %>% group_by(state_order) %>% ",
        "+ ",
        "        summarise(mean_state = round(mean(.data[[\"act5_mean\"]]),",
        "+ ",
        "                                     digits = 2), .groups = \"drop\") %>% ",
        "+ ",
        "        pivot_wider(names_from = state_order, names_prefix = \"state_mean\", ",
        "+ ",
        "                    values_from = mean_state) %>% ",
        "+ ",
        "        cbind(df_summary1)",
        "+ ",
        "",
        "+ ",
        "    return(df_summary2)",
        "+ ",
        "}",
        "> ",
        "df <- read_func(\"mesa-sleep-0002.csv\")",
        "> ",
        "df2 <- add_summary(df)",
        "> ",
        "mods <- plot_step(df2, \"act5_mean\", nb_iter = 10)",
        "[1] \"Did not find a HMM for 4 states\"\n",
        "> ",
        "m2 <- mods$m2",
        "> ",
        "m3 <- mods$m2",
        "> ",
        "m4 <- mods$m4",
        "> ",
        "aic2 <- AIC(m2, m3, m4) %>% arrange(Model) %>% ",
        "+ ",
        "    mutate(aic_model = paste(Model, round(AIC)), .keep = \"none\")",
        "> ",
        "aic2",
        "  aic_model\n1  m2 15255\n2  m3 15255\n",
        "> ",
        "m <- choose_model(mods)",
        "> ",
        "m",
        "Value of the maximum log-likelihood: -7584.077 \n\nStep length parameters:\n----------------------\n            state 1      state 2      state 3\nmean       13.89123 4.952486e+01 1.233135e+01\nsd        439.27850 5.005716e+01 1.505208e+01\nzero-mass   1.00000 9.996733e-09 9.999883e-09\n\n\nRegression coeffs for the transition probabilities:\n--------------------------------------------------\n             1 -> 2     1 -> 3    2 -> 1    2 -> 3   3 -> 1\nintercept -2.454673 -0.3367201 -5.731783 -4.042701 -1.20151\n         ",
        "    3 -> 2\nintercept -3.151276\n\nTransition probability matrix:\n-----------------------------\n            [,1]       [,2]       [,3]\n[1,] 0.555555577 0.04771736 0.39672706\n[2,] 0.003175274 0.97963217 0.01719255\n[3,] 0.223841765 0.03185433 0.74430391\n\nInitial distribution:\n--------------------\n[1] 2.049671e-08 1.000000e+00 1.032018e-11\n",
        "> ",
        "gamma_stats <- m$mle$stepPar %>% round(digits = 2)",
        "> ",
        "prob_matrix <- m$mle$gamma %>% round(digits = 3)",
        "> ",
        "df_order <- func_order(m, df2, \"act5_mean\") ",
        "> ",
        "df_ord <- plot_states(df2, m, df_order, \"act5_mean_sqrt\")",
        "> ",
        "centre <- prob_sleep(m, df2, df_order) ",
        "> ",
        "confusion <- accur_calc(df, df_ord)",
        "[1] \"Active states' numbers: 3\"\n",
        "> ",
        "df_sum2 <- summary_func(df, df_ord, df_order, aic2)",
        "> ",
        "df <- read_func(\"mesa-sleep-0001.csv\")",
        "> ",
        "df2 <- add_summary(df)",
        "> ",
        "mods <- plot_step(df2, \"act5_mean\", nb_iter = 15)",
        "> ",
        "m2 <- mods$m2",
        "> ",
        "m3 <- mods$m2",
        "> ",
        "m4 <- mods$m4",
        "> ",
        "aic1 <- AIC(m2, m3, m4) %>% arrange(Model) %>% ",
        "+ ",
        "    mutate(aic_model = paste(Model, round(AIC)), .keep = \"none\")",
        "> ",
        "aic1",
        "  aic_model\n1  m2 16742\n2  m3 16742\n3  m4 16689\n",
        "> ",
        "m3 <- mods$m3",
        "> ",
        "m4 <- mods$m4",
        "> ",
        "aic1 <- AIC(m2, m3, m4) %>% arrange(Model) %>% ",
        "+ ",
        "    mutate(aic_model = paste(Model, round(AIC)), .keep = \"none\")",
        "> ",
        "aic1",
        "  aic_model\n1  m2 16742\n2  m3 16741\n3  m4 16689\n",
        "> ",
        "gamma_stats <- m$mle$stepPar %>% round(digits = 2)",
        "> ",
        "prob_matrix <- m$mle$gamma %>% round(digits = 3)",
        "> ",
        "df_order <- func_order(m, df2, \"act5_mean\") ",
        "Error in data.frame(..., check.names = FALSE) : \n  arguments imply differing number of rows: 1788, 1784\n",
        "> ",
        "df_order <- func_order(m, df2, \"act5_mean\") ",
        "Error in data.frame(..., check.names = FALSE) : \n  arguments imply differing number of rows: 1788, 1784\n",
        "\nRestarting R session...\n\n"
    ]
}